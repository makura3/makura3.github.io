<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MOJIの本棚</title>
  
  <subtitle>&lt;span&gt;フロントエンドのあれこれを&lt;/span&gt;&lt;span&gt;じぶんのために&lt;/span&gt;</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://makura3.github.io/"/>
  <updated>2018-09-17T14:49:38.000Z</updated>
  <id>https://makura3.github.io/</id>
  
  <author>
    <name>makura3</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ESLintとPrettierとVSCodeでお手軽コードチェックするまで</title>
    <link href="https://makura3.github.io/Lint/eslint-Prettier/"/>
    <id>https://makura3.github.io/Lint/eslint-Prettier/</id>
    <published>2018-07-31T23:00:00.000Z</published>
    <updated>2018-09-17T14:49:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>色々な人が参画/離任を繰り返した結果、手がつけられないぐらいの量になった負の遺産(みたいなソースコード)。<br>自分がいるうちに少しでも綺麗にしておきたいと思い、ESLintとPrettierについて調べたので記事にしました。</p><div class="toc"><!-- toc --><ul><li><a href="#現状の問題点を考える">現状の問題点を考える</a></li><li><a href="#ツールの説明">ツールの説明</a></li><li><a href="#導入方法">導入方法</a><ul><li><a href="#必要なパッケージをインストール">必要なパッケージをインストール</a></li><li><a href="#eslintrcjsの作成">.eslintrc.jsの作成</a></li><li><a href="#eslintだけ使ってみる">ESLintだけ使ってみる</a></li></ul></li><li><a href="#エディタvscodeと連携して保存時にフォーマット構文チェックする">エディタ(VSCode)と連携して保存時にフォーマット&amp;構文チェックする</a></li><li><a href="#あとがき">あとがき</a></li></ul><!-- tocstop --></div><h2><span id="現状の問題点を考える">現状の問題点を考える</span></h2><p>まず、現在私が扱っているコードは古く、そして歴代のフロントエンドエンジニアによって何年もの月日をかけて熟成されたものです。<br>コーディング規約はあるものの、インデントはタブだったり半角スペース2つだったり、文字列はダブルクォーテーションだったりシングルクォーテーションだったり…<br>挙げきれないのですが、こんなカオスな感じになっています。<br><br>諸事情でこれら小さい粒だけを直すことができないので、案件ついでにチビチビと直していましたが数が多すぎるが故に全てを一度で直しきれずに所々に残ってしまっています。<br>こんな状態ではレビューコストもかかるし、何よりパッと見ただけで汚い。<br>今後新しく参画してくるであろうエンジニア(もちろん自分も含みますが)によって更に熟成が進んでしまうことが予想されます。<br><br>なるべく工数がかからないような方法を用いて常日頃からコードを綺麗にしておき、熟成するスピードを遅らせる必要がありそうです。  </p><h2><span id="ツールの説明">ツールの説明</span></h2><p>今回使用するツールの説明です。<br><br></p><ul><li>ESLint<br>　→コード検証ツール。コードのフォーマットも可能です。  </li><li>Prettier<br>　→コードフォーマッター。  </li></ul><p><br>ESLint1本でコードの検証とフォーマットをしてしまいたいところですが、これだけでは対応しきれないことがあるらしいので、<br>今回はフォーマットに特化したPrettierを併用していきます。</p><h2><span id="導入方法">導入方法</span></h2><h3><span id="必要なパッケージをインストール">必要なパッケージをインストール</span></h3><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D babel-eslint eslint eslint-config-prettier eslint-loader eslint-plugin-prettier prettier</span><br></pre></td></tr></table></figure><p><br>各パッケージの説明です。<br><br></p><ul><li><em>babel-eslint</em><br>→ESLint標準のパーサーで対応しきれなさそうな場合に必要。</li><li><em>eslint</em><br>→ESLint本体</li><li><em>eslint-config-prettier</em><br>→ESLintのフォーマットに対するルールを無効</li><li><em>eslint-loader</em><br>→webpack用のloader</li><li><em>eslint-plugin-prettier</em><br>→ESLint上でPrettierを動かす</li><li><em>prettier</em><br>→Prettier本体</li></ul><h3><span id="eslintrcjsの作成">.eslintrc.jsの作成</span></h3><p>プロジェクトルートに.eslintrc.jsを置き、設定とルールを書いていきます。<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">module.exports</span> <span class="string">=</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">  root:</span> <span class="literal">true</span><span class="string">,</span></span><br><span class="line"><span class="attr">  env:</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">    browser:</span> <span class="literal">true</span><span class="string">,</span></span><br><span class="line"><span class="attr">    node:</span> <span class="literal">true</span></span><br><span class="line">  <span class="string">&#125;,</span></span><br><span class="line"><span class="attr">  parserOptions:</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">    parser:</span> <span class="string">'babel-eslint'</span><span class="string">,</span></span><br><span class="line"><span class="attr">    ecmaVersion:</span> <span class="number">6</span></span><br><span class="line">  <span class="string">&#125;,</span></span><br><span class="line"><span class="attr">  extends:</span> <span class="string">[</span></span><br><span class="line">    <span class="string">"eslint:recommended"</span><span class="string">,</span> <span class="string">//ESLintで基本的なルールチェック(更に細かく個別指定可)</span></span><br><span class="line">    <span class="string">"plugin:prettier/recommended"</span>  <span class="string">//一番下に書かないとうまく動かない場合も</span></span><br><span class="line">  <span class="string">],</span></span><br><span class="line"><span class="attr">  plugins:</span> <span class="string">[],</span></span><br><span class="line">  <span class="string">//</span> <span class="string">ここにカスタムルールを追加します。</span></span><br><span class="line"><span class="attr">  rules:</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">"prettier/prettier"</span><span class="string">:</span> <span class="string">[</span></span><br><span class="line">      <span class="string">"error"</span><span class="string">,</span></span><br><span class="line">      <span class="string">&#123;</span></span><br><span class="line"><span class="attr">        "singleQuote":</span> <span class="literal">true</span><span class="string">,</span> <span class="string">//シングルクォーテーションのフォーマット</span> <span class="string">参考）https://prettier.io/docs/en/options.html#quotes</span></span><br><span class="line"><span class="attr">        "semi":</span> <span class="literal">false</span> <span class="string">//セミコロンのフォーマット</span> <span class="string">参考）https://prettier.io/docs/en/options.html#semicolons</span></span><br><span class="line">      <span class="string">&#125;</span></span><br><span class="line">    <span class="string">],</span></span><br><span class="line">  <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure></p><h3><span id="eslintだけ使ってみる">ESLintだけ使ってみる</span></h3><p>ちゃんと動くかチェックします。<br>簡単に実行できるよう、npm scriptsに以下のように追記しておきましょう。  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"lint"</span>: <span class="string">"eslint --ext .js --ignore-path .gitignore ."</span></span><br></pre></td></tr></table></figure><p>実行する際は、<code>npm run lint</code>です。<br>カスタムルールを追加していないので、eslint:recommendedの基本的なルールチェックが走ります。<br><br>ちなみに<code>--fix</code>をつけるとエラー個所をルールにそってESLintがフォーマットしてくれます。（Prettierではないです。）<br><br><br>たま〜にPrettierで一括フォーマット怖い！みたいな場合があるので、その時は上記のようにESLintだけ使います。  </p><h2><span id="エディタvscodeと連携して保存時にフォーマットamp構文チェックする">エディタ(VSCode)と連携して保存時にフォーマット&amp;構文チェックする</span></h2><p>VSCodeと連携して、ファイルを保存した時にフォーマット&amp;構文チェックされるようにします。<br>手が止まらずゴリゴリ実装できるのでとても便利です。  </p><p><br>まず、VSCode上で<a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint" target="_blank" rel="noopener">ESLint</a>と<a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode" target="_blank" rel="noopener">Prettier</a>のインストール/有効化をしておいてください。<br><br></p><p>VSCodeの設定ファイルはこんな感じになります。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"prettier.eslintIntegration"</span>: <span class="literal">true</span>, <span class="comment">//prettier-eslintを使うようになる</span></span><br><span class="line">  <span class="string">"eslint.enable"</span>: <span class="literal">true</span>, <span class="comment">// ESLint有効化</span></span><br><span class="line">  <span class="comment">// 適応するファイルタイプを決定</span></span><br><span class="line">  <span class="string">"eslint.validate"</span>: [</span><br><span class="line">    <span class="string">"javascript"</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"language"</span>: <span class="string">"vue"</span>,</span><br><span class="line">      <span class="string">"autoFix"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// プロジェクト配下のeslintrc.jsを読み込み</span></span><br><span class="line">  <span class="string">"eslint.options"</span>: &#123;</span><br><span class="line">    <span class="string">"configFile"</span>: <span class="string">".eslintrc.js"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 保存時にESLint--fixで自動フォーマット どちらかで良い</span></span><br><span class="line">  <span class="string">"editor.formatOnSave"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">"eslint.autoFixOnSave"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><br>これで設定は終わりです！<br>あとは保存してちゃんと動くか確認し、快適な実装ライフを楽しんでください。<br><br>こんなにすぐ導入できるなんて嬉しいですね。  </p><h2><span id="あとがき">あとがき</span></h2><p>試しに大型案件の無法地帯だったソースを検証してみたところ、とんでもない量のエラーが出ました。<br>古いシステムの場合でも環境作るのがめんどくさいとか思ってないで、早いタイミングで導入した方が良いですね。<br><br>JSの他にもstylelint＋Prettierでもう少し快適な実装ライフが送れそうなのでそのうち調べて導入しようと思ってます。</p>]]></content>
    
    <summary type="html">
    
      ESLintとPrettierを使って、保存時にフォーマットとコード検証する手順をまとめました。
    
    </summary>
    
      <category term="Lint" scheme="https://makura3.github.io/categories/Lint/"/>
    
    
      <category term="ESLint" scheme="https://makura3.github.io/tags/ESLint/"/>
    
      <category term="Prettier" scheme="https://makura3.github.io/tags/Prettier/"/>
    
  </entry>
  
  <entry>
    <title>Nuxt.jsとfirestoreを組み合わせて簡単なサイトを作った話</title>
    <link href="https://makura3.github.io/vue/nuxt-intro/"/>
    <id>https://makura3.github.io/vue/nuxt-intro/</id>
    <published>2018-07-10T18:30:00.000Z</published>
    <updated>2018-09-17T14:49:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>今回はVue.jsのフレームワーク、Nuxt.jsと、firebase各種を用いて小さなサイトの構築を行いました。<br>各種導入の際に詰まることが多かったので、手順をまとめました。<br><br>今回のサンプルソースは<a href="https://github.com/makura3/Nuxt-test" target="_blank" rel="noopener">こちら</a>です。  </p><div class="toc"><!-- toc --><ul><li><a href="#nuxtjsの導入表示確認まで">Nuxt.jsの導入・表示確認まで</a></li><li><a href="#firebase側の設定">firebase側の設定</a><ul><li><a href="#firebaseのapikeyを取得する">firebaseのAPIKeyを取得する</a></li><li><a href="#firestoreにデータを登録する">firestoreにデータを登録する</a></li><li><a href="#firestoreの導入">firestoreの導入</a></li></ul></li><li><a href="#storeの設定">storeの設定</a></li><li><a href="#vueファイルの設定">vueファイルの設定</a></li><li><a href="#実際に作業してみた所感">実際に作業してみた所感</a></li></ul><!-- tocstop --></div><h2><span id="nuxtjsの導入表示確認まで">Nuxt.jsの導入・表示確認まで</span></h2><p>ローカルホストでHelloWorldするまでの手順になるので、<em>Nuxt.jsを導入したことがある方は読み飛ばして構いません。</em><br><br>公式の<a href="https://ja.nuxtjs.org/guide/installation#%E3%82%B9%E3%82%AF%E3%83%A9%E3%83%83%E3%83%81%E3%81%8B%E3%82%89%E5%A7%8B%E3%82%81%E3%82%8B" target="_blank" rel="noopener">スクラッチから始める</a>を参考に導入していきます。<br><code>package.json</code>が作成されていることが前提です。  </p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -S nuxt</span><br></pre></td></tr></table></figure><p><br></p><p>次に<code>/src/pages/index.vue</code>を作成し、下記を記述します。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;Hello world!&lt;/h1&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></p><p><br></p><p>そして、/src配下が認識されるよう<code>nuxt.config.js</code> を作成し、下記を記述します。<br>（ルートにディレクトリを掘る場合はこの設定はしなくても問題ありません。）<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//nuxt.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  srcDir: <span class="string">'src/'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><br></p><p><code>package.json</code>には<figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"dev": "nuxt"</span><br></pre></td></tr></table></figure></p><p>を追加しておきます。<br><br>そして、<code>npm run dev</code>で起動します。</p><p><a href="http://localhost:3000" target="_blank" rel="noopener">http://localhost:3000</a> にアクセスすると「Hello world!」 が表示されたかと思います。<br><br>Nuxt.jsの導入確認は以上です。  </p><h2><span id="firebase側の設定">firebase側の設定</span></h2><h3><span id="firebaseのapikeyを取得する">firebaseのAPIKeyを取得する</span></h3><p>firestore導入作業を始める前に、<em>firebaseでプロジェクトを新規作成し、APIKeyを入手</em>しておいてください。<br><br>左側青色の<em>「プロジェクトを追加」</em>でプロジェクトを作成し、<img src="firebase.jpg" alt="firebase" title="firebase"></p><p><br><br>APIKeyは、コンソール画面の<em>「ウェブアプリにfirebaseを追加」</em> から取得できます。<br><br><img src="APIKey.jpg" alt="APIKeyの取得" title="APIKeyの取得"></p><p><br><br>更に、<em>firestoreを有効</em>にしておきます。<br><br><img src="firestore.jpg" alt="firestoreの有効化" title="firestoreの有効化"></p><h3><span id="firestoreにデータを登録する">firestoreにデータを登録する</span></h3><p>作成したfirebaseのプロジェクトにデータを登録します。<br>今回は分かりやすいようにitemコレクションの中に、nameフィールドを持ったドキュメントを3つ登録しました。<br><br><img src="col.png" alt="firestoreにデータを登録" title="firestoreにデータを登録">データの登録方法については今回省きます。  </p><h3><span id="firestoreの導入">firestoreの導入</span></h3><p>次にfiresotreの導入をしていきます。  </p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -S firebase</span><br></pre></td></tr></table></figure><p><br><br></p><p>firestoreの設定ファイルを追加します。<br>複数ファイル必要なので、一つずつ。<br><br><code>firestore.rules</code>を作成し、下記を記述します。<br>これはFirestoreのデータにアクセスできるかどうかのルールを記述するものですが、今回はただのサンプルなので全てのデータに対して読み書きが自由にできるようになっています。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /firestore.rules</span></span><br><span class="line">service cloud.firestore &#123;</span><br><span class="line">  match /databases/&#123;database&#125;/documents &#123;</span><br><span class="line">    match /&#123;<span class="built_in">document</span>=**&#125; &#123;</span><br><span class="line">      allow read, write;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><br><br><code>firestore.indexes.json</code>を作成し、下記を記述します。<br>これはfirestoreのインデックスを管理するものですが、今回は指定なしのまま進めます。<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// /firestore.indexes.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"indexes"</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><br><br>そして、前手順で作った２つの設定ファイルをを読み込ませるための<code>firebase.json</code>を作成し、下記を記述します。<br>とはいえ今回それぞれの設定内容が簡単になっているのであまり考えなくても良いのですが。  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /firebase.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"firestore"</span>: &#123;</span><br><span class="line">    <span class="string">"rules"</span>: <span class="string">"firestore.rules"</span>,</span><br><span class="line">    <span class="string">"indexes"</span>: <span class="string">"firestore.indexes.json"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br>そして、jsとの結合部分を記述します。<br>plugins配下に<code>firebaseInit.js</code>を作成し、下記を記述します。(ファイル名は自由です)<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /src/plugins/firebaseInit.js</span></span><br><span class="line"><span class="keyword">import</span> firebase <span class="keyword">from</span> <span class="string">'firebase'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'firebase/firestore'</span></span><br><span class="line"><span class="keyword">import</span> config <span class="keyword">from</span> <span class="string">'./../util/firebaseConfig'</span></span><br><span class="line"><span class="keyword">const</span> firebaseApp = firebase.initializeApp(config)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> settings = &#123; <span class="attr">timestampsInSnapshots</span>: <span class="literal">true</span> &#125;</span><br><span class="line"><span class="keyword">const</span> firestore = firebaseApp.firestore()</span><br><span class="line">firestore.settings(settings)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (!firebase.apps.length ? firebase.app() : firestore)</span><br></pre></td></tr></table></figure></p><p><br><br>APIKeyなどは<code>firebaseConfig.js</code>を作成し、別ファイルで管理するようにしました。<br>ディレクトリ・ファイル名は自由ですし、気にならない方はfirebaseInit.jsに書いても動作的には問題ないです。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /src/util/firebaseConfig.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  apiKey: <span class="string">''</span>,</span><br><span class="line">  authDomain: <span class="string">''</span>,</span><br><span class="line">  databaseURL: <span class="string">''</span>,</span><br><span class="line">  projectId: <span class="string">''</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>事前に用意しておいたAPIKeyはここに貼り付けておきます。<br>プッシュしないように気をつけて下さい。<br><br><br>そして、先程作成したプラグインが使えるように<code>nuxt.config.js</code>に設定を追記します。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /nuxt.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  srcDir: <span class="string">'src/'</span>,</span><br><span class="line">  plugins: [&#123; <span class="attr">src</span>: <span class="string">'~/plugins/firebaseInit'</span> &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2><span id="storeの設定">storeの設定</span></h2><p>store配下にindex.jsを作成し、処理を記述していきます。<br><br>Nuxt.jsではstoreを作成する時に<em>クラシックモード</em>(index.jsのみ)と<em>モジュールモード</em>(store配下のjsがモジュールに変換される)がありますが、今回は記述量が少ないのでクラシックモードを選択しています。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /src/store/index.js</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  INIT</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'./types'</span></span><br><span class="line"><span class="keyword">import</span> db <span class="keyword">from</span> <span class="string">'~/plugins/firebaseInit'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> itemRef = db.collection(<span class="string">'items'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> initPlugin = <span class="function"><span class="params">store</span> =&gt;</span> store.dispatch(INIT)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">  <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state: &#123;</span><br><span class="line">      itemList: []</span><br><span class="line">    &#125;,</span><br><span class="line">    mutations: &#123;</span><br><span class="line">      INIT(state, data) &#123;</span><br><span class="line">        state.itemList = data</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    actions: &#123;</span><br><span class="line">      INIT(&#123; commit &#125;) &#123;</span><br><span class="line">        itemRef.get().then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">let</span> list = []</span><br><span class="line">          res.forEach(<span class="function"><span class="params">doc</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> data = &#123;</span><br><span class="line">              id: doc.id,</span><br><span class="line">              name: doc.data().name,</span><br><span class="line">            &#125;</span><br><span class="line">            list.push(data)</span><br><span class="line">          &#125;)</span><br><span class="line">          commit(<span class="string">'INIT'</span>, list)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    getters: &#123;</span><br><span class="line">      getItems: <span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> state.itemList</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [initPlugin]</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure></p><p><br><br>タイプもindex.jsの中に入れても良かったのですが、癖で別ファイル化してます。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /src/store/types.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> INIT = <span class="string">'INIT'</span></span><br></pre></td></tr></table></figure></p><p><br><br>pluginsにinitPluginを設定することで、store初期化時にINITアクションが呼ばれるようになっています。<br>データの取得は、<code>db.collection</code>でコレクションを指定して、get()で出来ます。<br>更新するときはupdate()だったり、非常に分かりやすいです。  </p><h2><span id="vueファイルの設定">vueファイルの設定</span></h2><p>Nuxt.jsの導入のHelloWorld表示で使用したvueファイルを変更していきます。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;li v-for=&quot;(item,index) in init&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">      &#123;&#123; item.id &#125;&#125;：&#123;&#123; item.name &#125;&#125;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; mapGetters &#125; from &apos;vuex&apos;</span><br><span class="line">export default &#123;</span><br><span class="line">  computed: &#123;</span><br><span class="line">    ...mapGetters(&#123;</span><br><span class="line">      init: &apos;getItems&apos;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>mapGettersでgetItemsというgetterをinitという名前でマッピングしています。<br>今回は入れてないのですが、最初はItemsの中身がないので真っ白になってしまいます。<br>そのため、データの取得が終わるまではローディング画像を出すなりした方が良さそうです。<br><br><br>設定は以上になります。<br>さっそく<code>npm run dev</code>で確認してみます。<br><br>ローカルでも<a href="https://makuraswork.firebaseapp.com" target="_blank" rel="noopener">サンプルページ</a>のように、登録したデータが表示されていれば正しく設定出来ています。<br>今回はfirebase Hostingを使ってデプロイしてみました。  </p><h2><span id="実際に作業してみた所感">実際に作業してみた所感</span></h2><p>vueの経験が足りなかったが故に導入が終わるまでは苦労しましたが、記事にして振り返ってみると割と簡単に連携できるのかなという印象でした。<br>storeの部分を分割して綺麗にしておけばより良さそう。<br>他には設定ファイルの多さが若干気になりますが、小さいプロジェクトなら問題ないのかなぁ…。<br><br>とはいえfirestore＋Hostingの組み合わせがプライベートで勉強するにはとても楽ちんなので、今後どんどん使っていきたいです。<br><br>おしまい。</p>]]></content>
    
    <summary type="html">
    
      Vue.jsのフレームワークであるNuxt.jsとfirebaseのサービスであるfirestoreを組み合わせて、小さなサイトを作りました。その際の導入手順をまとめました。
    
    </summary>
    
      <category term="vue" scheme="https://makura3.github.io/categories/vue/"/>
    
    
      <category term="Vue" scheme="https://makura3.github.io/tags/Vue/"/>
    
      <category term="firestore" scheme="https://makura3.github.io/tags/firestore/"/>
    
      <category term="Nuxt" scheme="https://makura3.github.io/tags/Nuxt/"/>
    
  </entry>
  
  <entry>
    <title>Vue.jsのテンプレート構文とコンパイルについてのまとめ</title>
    <link href="https://makura3.github.io/Vue/vue-summary/"/>
    <id>https://makura3.github.io/Vue/vue-summary/</id>
    <published>2018-05-23T00:00:00.000Z</published>
    <updated>2018-09-17T14:49:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>諸事情でVue.jsを触ることになったのでまずはドキュメントの読み込みからはじめました。<br>完全に理解出来ているのかどうかを確認するため、内容を忘れないためにも記事としてまとめました。<br><br>ちなみに<code>今のVue熟練度は1</code>(過去にチュートリアルレベルの作品を途中で投げ出したことがある)です。  </p><div class="toc"><!-- toc --><ul><li><a href="#はじめに">はじめに</a></li><li><a href="#vuejsとは">Vue.jsとは</a><ul><li><a href="#プログレッシブフレームワーク">プログレッシブフレームワーク</a></li><li><a href="#導入方法">導入方法</a></li></ul></li><li><a href="#vueのコンパイルについて知る">Vueのコンパイルについて知る</a><ul><li><a href="#テンプレート構文">テンプレート構文</a></li><li><a href="#テンプレートのコンパイルとレンダリング">テンプレートのコンパイルとレンダリング</a></li><li><a href="#ビルドのつかいわけ">ビルドのつかいわけ</a></li></ul></li><li><a href="#vueのコンパイルのタイミング">Vueのコンパイルのタイミング</a><ul><li><a href="#事前にコンパイルする方法">事前にコンパイルする方法</a></li></ul></li><li><a href="#まとめ">まとめ</a></li><li><a href="#おわりに">おわりに</a></li></ul><!-- tocstop --></div><h2><span id="はじめに">はじめに</span></h2><p>この記事は<code>超初心者向け</code>の記事となっています。<br><br>ドキュメントの中の、<a href="https://jp.vuejs.org/v2/guide/installation.html" target="_blank" rel="noopener">インストールページ</a>の解説で、対応バージョンはv2.xです。  </p><h2><span id="vuejsとは">Vue.jsとは</span></h2><p>公式のガイドに大きく、  </p><blockquote><p>ユーザーインターフェイスを構築するためのプログレッシブフレームワークです。  </p></blockquote><p>と記載がありました。ふむふむ。<br>プログレッシブフレームワークとはなんだろう？  </p><h3><span id="プログレッシブフレームワーク">プログレッシブフレームワーク</span></h3><p>仕様変更や機能追加を繰り返すアプリケーションの変化に柔軟に対応できるのが、プログレッシブフレームワークと呼ばれるものです。  </p><p>Vue自体はview層だけに焦点を当てたライブラリですが<a href="https://github.com/vuejs/awesome-vue#components--libraries" target="_blank" rel="noopener">サポートライブラリ</a>などの導入により、アプリケーション規模に合わせた機能を提供できるようになっています。<br><br> 必要な機能を必要な時に足していき、無駄なものは省く。そんなイメージでしょうか。<br>なんだかワクワクしてきましたね！</p><h3><span id="導入方法">導入方法</span></h3><p>まずVueを使うための<a href="https://jp.vuejs.org/v2/guide/installation.html" target="_blank" rel="noopener">3種類の利用方法</a>を確認しておきます。<br><br></p><h4><span id="scriptタグで直接組み込む">scriptタグで直接組み込む</span></h4><p>開発モード/本番モードでファイルが分かれているので、状況に応じて<a href="https://jp.vuejs.org/v2/guide/installation.html#lt-script-gt-%E7%9B%B4%E6%8E%A5%E7%B5%84%E3%81%BF%E8%BE%BC%E3%81%BF" target="_blank" rel="noopener">公式サイト</a>からダウンロードし読み込んで下さい。<br>開発モードでは<code>警告出力とデバッグモード</code>がありますが、本番モードでは<code>警告出力なしかつ圧縮</code>されています。<br><br>もしくは<a href="https://jp.vuejs.org/v2/guide/installation.html#CDN" target="_blank" rel="noopener">CDN</a>を使用することでVueのソースが参照可能になります。 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 略 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 略 --&gt;</span></span><br></pre></td></tr></table></figure><h4><span id="cli">CLI</span></h4><p>Vueでは<a href="https://github.com/vuejs/vue-cli" target="_blank" rel="noopener">オフィシャルCLI</a>が用意されています。<br>すぐに環境構築ができるので楽なのですが、右も左も分からない初心者さん(私)にはオススメしていないのでこんなのもあるよぐらいにしておきます。  </p><h4><span id="npm">NPM</span></h4><p>公式サイトでも推奨されている方法で、私もこの方法を使用しています。<br>Vueのみのインストールは公式に記述されている通りで問題ないですが、加えて使用するモジュールバンドラにそったloaderなどをインストールする必要があります。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vueだけインストール</span></span><br><span class="line">npm i -S vue</span><br><span class="line"></span><br><span class="line"><span class="comment">// webpackを使う場合</span></span><br><span class="line">npm i -D vue-loader</span><br></pre></td></tr></table></figure></p><h2><span id="vueのコンパイルについて知る">Vueのコンパイルについて知る</span></h2><p>コンパイルについて詳しく解説する前に、まずVueのテンプレート構文3種類について説明します。<br>事前にどのような記述方法があるのかを知っておくことで、後述するコンパイルについて理解し易くなると思います。</p><h3><span id="テンプレート構文">テンプレート構文</span></h3><h4><span id="1文字列テンプレート">1.文字列テンプレート</span></h4><p><a href="https://jp.vuejs.org/v2/guide/#%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%AB%E3%82%88%E3%82%8B%E6%A7%8B%E6%88%90" target="_blank" rel="noopener">公式の一番最初</a>にスッと出てくる記述で、文字列でコンポーネントを定義します。<br>下記の例は一行ですが、複数行で書くことも出来ます。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'todo-item'</span>, &#123;</span><br><span class="line">  template: <span class="string">'&lt;li&gt;This is a todo&lt;/li&gt;'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h4><span id="2直接render関数で書く">2.直接render関数で書く</span></h4><p>こちらはrender関数に直接定義しています。<br>あ、ちょっと読みにくい…。  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'anchored-heading'</span>, &#123;</span><br><span class="line">  render: <span class="function"><span class="keyword">function</span> (<span class="params">createElement</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> createElement( <span class="string">'h'</span> + <span class="keyword">this</span>.level )</span><br><span class="line">  &#125;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    <span class="comment">//省略</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4><span id="3単一ファイルコンポーネント">3.単一ファイルコンポーネント</span></h4><p>一つのファイルにtemplate、script、styleをまとめています。<br>一番よく見る書き方です。<br><br>単一ファイルコンポーネントを扱う場合は、webpackやBrowserifyなどのビルドツールが必要です。  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello world!!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">// 省略</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 省略 --&gt;</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3><span id="テンプレートのコンパイルとレンダリング">テンプレートのコンパイルとレンダリング</span></h3><p>Vueはrendar関数(描画関数)に表示したい内容を渡すことでレンダリングするしくみのようです。<br>そのためtemplateを使用した場合は、定義したtemplateをrendar関数が読み取れるように変換(コンパイル)を行う必要があります。<br><br>直接render関数で書いた場合は描画したいものをすでにrendar関数に渡しているので、コンパイルする必要はありません。<br><br><br> </p><h3><span id="ビルドのつかいわけ">ビルドのつかいわけ</span></h3><p><code>templateを使用</code>した場合コンパイルが必要なので、<code>完全ビルド</code>が必要となります。<br>文字列テンプレートや、単一ファイルコンポーネントの構文がこれにあたります。</p><h4><span id="完全ビルドとは">完全ビルドとは？</span></h4><p>コンパイルに必要なコンパイラとランタイム※の両方が含まれたビルドになります。<br>※ランタイムとは、Vueインスタンスの作成やレンダリングなどコンパイラ以外の機能のことを言います。  </p><p><br><br><br></p><p><code>rendar関数に直接書いた場合</code>は、コンパイルは必要ないので<code>ランタイム限定ビルド</code>で十分です。</p><h4><span id="ランタイム限定ビルドとは">ランタイム限定ビルドとは？</span></h4><p>ランタイムのみが含まれています。<br><em>完全ビルドに比べておよそ30%ほど軽量</em>です。<br><br>ちなみにCDNからVueを導入した場合は、完全ビルド用のvue.jsが読み込まれます。 </p><h2><span id="vueのコンパイルのタイミング">Vueのコンパイルのタイミング</span></h2><p>次にこの公式ドキュメントを読んでみてください。<br><br></p><blockquote><p>DOM内のテンプレートまたはJavaScript内のテンプレート文字列を使用する場合、テンプレートから描画関数へのコンパイルはその場 (on the fly) で実行されます。<br><br>通常、ほとんどの場合、これは十分高速ですが、アプリケーションのパフォーマンスが重要な場合は避けるのが最善です。  </p></blockquote><p><br></p><p>簡単に説明すると、テンプレートをコンパイルするタイミングは<code>ブラウザ上で実行した瞬間だよ</code>と言っているのです。<br>続けて、パフォーマンスが重要な場面では避けたほうがいいよと言っています。<br><br>そこで、Vueでは事前にコンパイルを行うしくみが用意されています。<br><br></p><h3><span id="事前にコンパイルする方法">事前にコンパイルする方法</span></h3><p>webpackやBrowserifyなどのビルドツールにより実現された<code>vue</code>拡張子の単一ファイルコンポーネントを使用するときは、vue-loaderなどを通して事前コンパイルが可能です。<br><br>これにより、事前にコンパイルしておけば実行時はランタイム限定ビルドで事足りるのです。<br><br><br>つらつら文字で説明しましたが、実際にソースを見た方が分かりやすいと思います。<br>私のgithubに<a href="https://github.com/makura3/Vue-helloWorld" target="_blank" rel="noopener">リポジトリ</a>を作りましたので、興味があれば読んでみてください。<br><br></p><p>それぞれのパターンでファイルを分けています。</p><ul><li>文字列テンプレート＋完全ビルド</li><li>render関数＋ランタイム限定ビルド</li><li>単一ファイルコンポーネント＋ランタイム限定ビルド</li></ul><h2><span id="まとめ">まとめ</span></h2><ul><li>Vueはサポートライブラリが豊富で、どんな規模のアプリケーションにも対応しやすい</li><li>webpackなどのビルドツールを用いることで、単一ファイルコンポーネントが使えるようになるかつ軽量化されたVueを使うことができる</li></ul><h2><span id="おわりに">おわりに</span></h2><p>Vueは珍しく日本語ドキュメントが用意されているものの、読んでいるとどういう意味だろう？と思う点が何度もありました。<br>特にコンパイル云々の話は苦手な部分だったので、今回で大分理解が深まりました。</p>]]></content>
    
    <summary type="html">
    
      初心者向けにVue.jsの導入方法からテンプレート構文、コンパイル(コンパイラとビルドの種類)についてまとめました。完全ビルドとランタイム限定ビルドの動作確認用サンプルソースも用意しています。
    
    </summary>
    
      <category term="Vue" scheme="https://makura3.github.io/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://makura3.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Hexoでブログ構築 まとめ</title>
    <link href="https://makura3.github.io/Hexo/hexo-summary/"/>
    <id>https://makura3.github.io/Hexo/hexo-summary/</id>
    <published>2018-04-23T19:30:00.000Z</published>
    <updated>2018-09-17T14:49:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>先日<a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>を使って、Github pagesでブログを公開しました。<br>公開まで簡単に出来る！とよく紹介されているのですが、なんだかんだで引っかかったところが多々あったのでまとめてみました。  </p><div class="toc"><!-- toc --><ul><li><a href="#hexo設定関係のつまづき">Hexo設定関係のつまづき</a><ul><li><a href="#configが複数あるんだけども">configが複数あるんだけども</a></li><li><a href="#rssの設置">RSSの設置</a></li></ul></li><li><a href="#seoに関する設定のつまづき">SEOに関する設定のつまづき</a><ul><li><a href="#meta-descriptionの設定">meta descriptionの設定</a></li><li><a href="#sitemapを作る">sitemapを作る</a></li><li><a href="#google-analyticsの設定">google-analyticsの設定</a></li><li><a href="#robotstxtの設置">robots.txtの設置</a></li></ul></li><li><a href="#ページ作成に関するつまづき">ページ作成に関するつまづき</a><ul><li><a href="#新規でページを増やしたい">新規でページを増やしたい</a></li><li><a href="#404ページ">404ページ</a></li></ul></li><li><a href="#記事作成に関するつまづき">記事作成に関するつまづき</a><ul><li><a href="#記事の途中に目次を入れたい">記事の途中に目次を入れたい</a></li><li><a href="#パーマリンクの設定">パーマリンクの設定</a></li></ul></li><li><a href="#テーマに関するつまづき">テーマに関するつまづき</a><ul><li><a href="#テーマを探す">テーマを探す</a></li><li><a href="#scssのコンパイル">scssのコンパイル</a></li><li><a href="#ページ毎にヘッダーを出しわけたい">ページ毎にヘッダーを出しわけたい</a></li></ul></li></ul><!-- tocstop --></div><h2><span id="hexo設定関係のつまづき">Hexo設定関係のつまづき</span></h2><h3><span id="configが複数あるんだけども">configが複数あるんだけども</span></h3><p>Hexoではブログ本体に関する設定<code>_config.yml</code>と、テーマに関する<code>_config.yml</code>が存在します。<br><br>使い分けですが、絶対に必要な設定(デプロイなどの設定)を前者に、<br>なくても問題ない設定（google_analyticsなど）を後者に記述するようにしています。  </p><h3><span id="rssの設置">RSSの設置</span></h3><p>RSSの設置は、<a href="https://github.com/hexojs/hexo-generator-feed" target="_blank" rel="noopener">hexo-generator-feed</a>というプラグインで対応しました。<br><br>sitemap導入時と同じようにnpm installし、必要に応じてconfig.ymlでオプションを変更してください。<br>デフォルト値では、<a href="http://localhost:4000/atom.xml" target="_blank" rel="noopener">http://localhost:4000/atom.xml</a>で生成されます。</p><h2><span id="seoに関する設定のつまづき">SEOに関する設定のつまづき</span></h2><h3><span id="meta-descriptionの設定">meta descriptionの設定</span></h3><p>デフォルト値をconfig.ymlに記述しておき、記事ページではdescriptionが重複しないよう毎回設定しています。<br>記事の文字を抜き出して自動で設定することも可能ですが、より効果のある文章にするために意図的に手動にしています。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// head.ejsに下記を記述</span></span><br><span class="line"></span><br><span class="line">&lt;% <span class="keyword">if</span> (page.description) &#123; %&gt;</span><br><span class="line">  &lt;meta name=<span class="string">"description"</span> content=<span class="string">"&lt;%= page.description %&gt;"</span>&gt;</span><br><span class="line">&lt;% &#125; <span class="keyword">else</span> <span class="keyword">if</span>(config.description) &#123; %&gt;</span><br><span class="line">  &lt;meta name=<span class="string">"description"</span> content=<span class="string">"&lt;%= config.description %&gt;"</span>&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure></p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 記事.mdの設定</span></span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">(略)</span><br><span class="line">description: 'descriptionに設定したい文章をここに'</span><br><span class="line">(略)</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h3><span id="sitemapを作る">sitemapを作る</span></h3><p>公式のプラグインが用意されているので、そちらを使用しました。<br><a href="https://github.com/hexojs/hexo-generator-sitemap" target="_blank" rel="noopener">hexo-generator-sitemap</a><br><br>npm installし、必要に応じて<code>_config.yml</code>でオプションを変更してください。<br>デフォルト値では、<a href="http://localhost:4000/sitemap.xml" target="_blank" rel="noopener">http://localhost:4000/sitemap.xml</a>で生成されます。</p><!-- ### OGPの設定簡単に言うと、URLを共有した際に見た目がリッチになるアレです。  こちらは[公式がヘルパー](https://hexo.io/docs/helpers.html#open-graph)を用意していますが、使い方が書いてない。 --><h3><span id="google-analyticsの設定">google-analyticsの設定</span></h3><p>トラッキングIDを<code>themes/themeName/_config.yml</code>に設定し、ejsで出力するようにしました。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span> (theme.google_analytics)&#123; %&gt;</span><br><span class="line">  &lt;script <span class="keyword">async</span> src=<span class="string">"https://www.googletagmanager.com/gtag/js?id=&lt;%= theme.google_analytics %&gt;"</span>&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    <span class="built_in">window</span>.dataLayer = <span class="built_in">window</span>.dataLayer || [];</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">gtag</span>(<span class="params"></span>)</span>&#123;dataLayer.push(<span class="built_in">arguments</span>);&#125;</span><br><span class="line">    gtag(<span class="string">'js'</span>, <span class="keyword">new</span> <span class="built_in">Date</span>());</span><br><span class="line"></span><br><span class="line">    gtag(<span class="string">'config'</span>, <span class="string">'&lt;%= theme.google_analytics %&gt;'</span>);</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;% &#125; %&gt;</span></span><br></pre></td></tr></table></figure></p><h3><span id="robotstxtの設置">robots.txtの設置</span></h3><p><a href="https://github.com/leecrossley/hexo-generator-robotstxt" target="_blank" rel="noopener">hexo-generator-robotstxt</a>というプラグインが有名そうだったのですが、1ファイル置けばいいだけなので手動で設置しました。<br>配置先は<code>project/source/</code>です。<br><br>中身は下記の通り。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">User-Agent:*</span><br><span class="line">Disallow:</span><br><span class="line">Sitemap:https://makura3.github.io/sitemap.xml</span><br></pre></td></tr></table></figure></p><p>Google Search Consoleのrobots.txt テスターで正しく記述されているか確認しておくと良いです。</p><h2><span id="ページ作成に関するつまづき">ページ作成に関するつまづき</span></h2><h3><span id="新規でページを増やしたい">新規でページを増やしたい</span></h3><p>Hexoでページを増やす場合は少々面倒です。<figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> hexo new page testPage</span><br></pre></td></tr></table></figure></p><p>実行すると<code>/source/testPage/index.md</code>が作成されます。<br><br> index.mdの中身は、<figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">layout: testPage①</span><br><span class="line">---</span><br></pre></td></tr></table></figure></p><p>とします。 <br><br>次に、<code>/themes/themeName/layout</code>の配下にtestPage.ejs②を作成すると、<br><a href="/testPage.html">/testPage</a>でアクセスできるようになります。<br><br>作成する際、①と②は同じ名前を指定するようにしてください。<br><br><br>プラグインを入れるともう少し簡単にページが作れるようですが、<br>更新が止まっている＆必須ではなかったので導入は見送りました。</p><h3><span id="404ページ">404ページ</span></h3><p>404ページは自分で作成する必要があります。<br><code>$ hexo new page 404</code>とし、index.mdに<figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">permalink: /404.html</span><br><span class="line">---</span><br></pre></td></tr></table></figure></p><p>と記載してください。<br><a href="/404.html">/404.html</a>でアクセスが可能になります。<br><br>通常ページと同じく、layoutの設定も可能なのでオリジナルの404ページが作れます。</p><h2><span id="記事作成に関するつまづき">記事作成に関するつまづき</span></h2><h3><span id="記事の途中に目次を入れたい">記事の途中に目次を入れたい</span></h3><p><a href="https://hexo.io/docs/helpers.html#toc" target="_blank" rel="noopener">目次生成のヘルパー</a>が公式で用意されていますが、記事の途中に挿入することはできません。<br>目次の前にまえがきを設置しておきたかったので、<code>hexo-toc</code>というプラグインを導入しました。<br>設定方法は<a href="https://github.com/bubkoo/hexo-toc" target="_blank" rel="noopener">github</a>をご覧ください。</p><h3><span id="パーマリンクの設定">パーマリンクの設定</span></h3><p>SEOの観点から、非常に大切な部分です。<code>project/_config.yml</code>に設定を記述します。散々迷った結果、<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">permalink: :category/:id/</span><br></pre></td></tr></table></figure></p><p>とし、カテゴリー+記事ID(スラッグ)の形としました。<br>記事投稿後にカテゴリーを変える可能性がある場合は、categoryがはいっているとURLが変わってしまうため記事IDのみでいいのではないでしょうか。<br><br>記事ごとに記事IDを設定する場合は、.mdの上部で設定をする必要があります。<figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">id: idname</span><br><span class="line">---</span><br></pre></td></tr></table></figure></p><h2><span id="テーマに関するつまづき">テーマに関するつまづき</span></h2><h3><span id="テーマを探す">テーマを探す</span></h3><p><a href="https://hexo.io/themes/index.html" target="_blank" rel="noopener">公式</a>や<a href="https://github.com/search?utf8=%E2%9C%93&amp;q=hexo-theme&amp;ref=simplesearch" target="_blank" rel="noopener">Github</a>から好みのテーマを探すことができます。<br><code>themes/</code>にテーマフォルダを配置し、<code>project/_config.yml</code>の中の<code>theme: themeName</code>の部分を変更します。<br><br>ちなみにこのブログで現在使用しているテーマは自作したものなので、ある程度形になってきたらそのうち配布する予定です。</p><h3><span id="scssのコンパイル">scssのコンパイル</span></h3><p>Hexoには、node-sassがくっついています。<br><code>hexo-renderer-scss</code>をnpm installし、<code>_config.yml</code>に下記を記載しました。<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># style settings</span></span><br><span class="line"><span class="attr">node_sass:</span></span><br><span class="line"><span class="attr">  debug:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  outputStyle:</span> <span class="string">compressed</span></span><br><span class="line"><span class="attr">  precision:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">  sourceComments:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  includePaths:</span> <span class="string">['./node_modules/normalize-scss/sass/','./node_modules/reset-css/']</span></span><br></pre></td></tr></table></figure></p><p>個人的にnormalize.cssとreset.cssを追加でimportできるようにしています。(npm install必須)  </p><h3><span id="ページ毎にヘッダーを出しわけたい">ページ毎にヘッダーを出しわけたい</span></h3><p><a href="https://hexo.io/docs/variables.html#Page-Variables" target="_blank" rel="noopener">公式の変数一覧</a>の中に<code>page.layout</code>という変数があるので、ページ毎にejs内で分岐することが可能です。<br><br><br><br>その他にもcircleCIで自動デプロイまで行なってみたりしているので<br>そのうち紹介できたらいいなと思ってます。</p>]]></content>
    
    <summary type="html">
    
      Hexoでブログを構築しました。descriptionなどのSEOに関する設定から新規ページの作成方法など、つまづいた部分をまとめています。
    
    </summary>
    
      <category term="Hexo" scheme="https://makura3.github.io/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://makura3.github.io/tags/Hexo/"/>
    
  </entry>
  
</feed>
